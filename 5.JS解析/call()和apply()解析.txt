  /*
        1、方法定义
        call方法:
        语法：call([thisObj[,arg1[, arg2[,   [,.argN]]]]])
        定义：调用一个对象的一个方法，以另一个对象替换当前对象。
        说明：
        call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。
        如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。

        apply方法：
        语法：apply([thisObj[,argArray]])
        定义：应用某一对象的一个方法，用另一个对象替换当前对象。
        说明：
        如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。
        如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数。
        */
        /*
        call和apply相同点：改变函数中this的指向
        不同点：函数参数的传递形式
        call将函数参数依次传入
        apply将函数参数用一个数组的形式传入
        */
        ///无参数
        function fn(){
            console.log(this.name);
        }
        var p1={name:1};
        fn.call(p1); //用fn这个对象 代替p1这个对象,调用p1的一个方法
        fn.apply(p1);
        //有参数
        //a
        function fn2 (name,age) {
            this.name=name;
            this.age=age;
            console.log(this.name);
        }
        var p2 = {};
        fn2.call(p2,"张三",20);
        fn2.apply(p2,["张三",20]);
        //b
        var fun = function (a, b) {
			console.log(this, a, b);
		};
		// fun(100, 200);
		fun.call({name : 'jack'}, 300, 400); //{name : 'jack'}, 300, 400
		// fun();


        function Animal(){    
                this.name = "Animal";    
                this.showName = function(){    
                    console.log(this.name);    
                }    
            }    
            function Cat(){    
                this.name = "Cat";    
            }    
            var animal = new Animal();    
            var cat = new Cat();    
            //通过call或apply方法，将原本属于Animal对象的showName()方法交给对象cat来使用了。    
            //输入结果为"Cat"    
            animal.showName.call(cat, '');    
            // animal.showName.apply(cat,[]);
            // call 的意思是把 animal 的方法放到cat上执行，原来cat是没有showName() 方法，
            // 现在是把animal 的showName()方法放到 cat上来执行，所以this.name 应该是 Cat